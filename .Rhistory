#Acortamos los nombres de la columna serie (Nos interesan)
gdp<-gdp%>%mutate(variable=ifelse(serie=="NY.GDP.PCAP.PP.KD","GDP_Per"))
#Seleccionamos las nuevas columnas
gdp<-gdp%>%select(-c(`Series Name`,serie,variable))
View(gdp)
#hacemos el pivot longer y wider
gdp<-gdp%>%pivot_longer(!c(country,ccode),names_to="year",values_to="gdp")
dp_percapita <- read_excel("~/Viernes de codigo/Sesion 3/gdp_percapita.xlsx")
View(gdp_percapita)
gdp <- gdp_percapita
gdp_percapita <- read_excel("~/Viernes de codigo/Sesion 3/gdp_percapita.xlsx")
View(gdp_percapita)
gdp <- gdp_percapita
#Datos CO2
WDI_CO2_s <-read_excel("~/Viernes de codigo/Sesion 3/WDI_CO2_s.xlsx")
View(WDI_CO2_s)
wdi <- WDI_CO2_s
#Ajustamos los nombres
colnames(gdp)[4]<-"serie"
colnames(gdp)[1]<-"country"
colnames(gdp)[2]<-"ccode"
colnames(gdp)[5]<-1997
#Para no hacerlo año por año, usamos un loop
i<-5
while (i <29){
i<-i+1
colnames(gdp)[i]<-1997+i-5
}
#
#Acortamos los nombres de la columna serie (Nos interesan)
gdp<-gdp%>%mutate(variable=ifelse(serie=="NY.GDP.PCAP.PP.KD","GDP_Per"))
#Seleccionamos las nuevas columnas
gdp<-gdp%>%select(-c(`Series Name`,serie,variable))
#hacemos el pivot longer y wider
gdp<-gdp%>%pivot_longer(!c(country,ccode),names_to="year",values_to="gdp")
gdp<-gdp%>%filter(!is.na(country))
gdp[gdp==".."]<-NA
Ajustamos los nombres de las columnas
#Ajustamos los nombres de las columnas
colnames(wdi)[2]<-"serie"
colnames(wdi)[3]<-"country"
colnames(wdi)[4]<-"ccode"
colnames(wdi)[5]<-1997
#Para no hacerlo año por año, usamos un loop
i<-5
while (i <29){
i<-i+1
colnames(wdi)[i]<-1997+i-5
}
#Acortamos los nombres de la columna serie (Nos interesan)
wdi<-wdi%>%mutate(variable=ifelse(serie=="EN.ATM.GHGT.KT.CE","total_ghg",ifelse(serie=="EN.ATM.CO2E.KT","total_co2",
ifelse(serie=="EN.ATM.CO2E.PP.GD.KD","co2_pib",
ifelse(serie=="SP.POP.TOTL","pop","")))))
#Seleccionamos las nuevas columnas
wdi<-wdi%>%select(-c(`Series Name`,serie,))
#Cambiamos la estructura de las variables
wdi<-wdi%>%pivot_longer(!c(country,ccode,variable),names_to="year",values_to="value")
wdi<-wdi%>%filter(!is.na(country)) # eliminamos los valores missing para la columna country
#Segundo paso hacer un wider
wdi1<-wdi%>%pivot_wider(id_cols=c(country,ccode,year),names_from=variable,values_from=value)
wdi1[wdi1==".."]<-NA
#Primera froma de cambiar el tipo de dato de la columna
wdi1$year <- as.numeric(wdi1$year)
class(wdi1$year)
#Segunda forma
i<-c(3:7)
wdi1[,i]<-apply(wdi1[,i],2,function(x)as.numeric(x)) # así hacemos todas las columnas de una vez
sapply(wdi1,class)
#Cambiar el tipo de dato
i<-c(3:4)
gdp[,i]<-apply(gdp[,i],2,function(x)as.numeric(x)) # así hacemos todas las columnas de una vez
sapply(gdp,class)
#Juntar las bases de datos
wdi1<-left_join(wdi1,gdp,by=c("ccode","year","country"))
View(wdi1)
library(plotly)
ghg.plot<-wdi1%>%filter(year==2019)%>%plot_ly(y=~total_ghg,x=~ccode,type="bar",name="Total")
ghg.plot
ghg.plot<-ghg.plot%>%
layout(xaxis=list(categoryorder="total descending"))
ghg.plot
epc <- wdi1 %>% select(total_ghg,pop)
View(epc)
epc <- wdi1 %>% total_ghg / pop
epc <- wdi1 %>% total_ghg/pop
epc <- wdi1$total_ghg/wdi1$pop
ghg.plot1 <- plot_ly(y=~epc,x=~ccode,type="bar",name="Total")
ghg.plot1
ghg.plot1 <- plot_ly(y=~epc,x=~wdi1$ccode,type="bar",name="Total")
ghg.plot1
ghg.plot1<-ghg.plot1%>%
layout(xaxis=list(categoryorder="total descending"))
ghg.plot1
wdi1 <- wdi1 %>% mutate(epc= total_ghg/pop)
View(wdi1)
ghg.plot1 <- wdi1 %>% filter(year=2019) %>% plot_ly(y=~epc,x=~ccode,type="bar",name="Total")
ghg.plot1 <- wdi1 %>% filter(year==2019) %>% plot_ly(y=~epc,x=~ccode,type="bar",name="Total")
ghg.plot1
ghg.plot1<-ghg.plot1%>%
layout(xaxis=list(categoryorder="total descending"))
ghg.plot1
gy<-wdi1%>%filter(year==2019)%>%plot_ly(x=~gdp,y=~epc,type="scatter", text=~ccode)
gy
total<-wdi1%>%group_by(year)%>%summarise(total=sum(total_ghg,na.rm=TRUE))
ghgtot.plot<-total%>%plot_ly(x=~year,y=~total,type="scatter",mode="lines")
ghgtot.plot
total<-wdi1%>%group_by(year)%>%summarise(total=sum(total_ghg,na.rm=TRUE))
View(total)
total<-wdi1%>%group_by(year)%>%summarise(total=sum(total_ghg,na.rm=FALSE))
total<-wdi1%>%group_by(year)%>%summarise(total=sum(total_ghg,na.rm=TRUE))
total1 <- filter(year < 2020)
total1 <- total %>% filter(year < 2020)
View(total1)
ghgtot.plot<-total1%>%plot_ly(x=~year,y=~total,type="scatter",mode="lines")
ghgtot.plot
subplot(ghg.plot,ghg.plot1,gy,ghgtot.plot,nrows=2)
subplot(ghg.plot,ghg.plot1,gy,ghgtot.plot,nrows=2) + theme_dark()
subplot(ghg.plot,ghg.plot1,gy,ghgtot.plot,nrows=2)
library(tidyverse)
library(magrittr)
library(dplyr)
library(lubridate)
library(tidyr)
library(fpp2)
library(readxl)
library(astsa)
library(tseries)
library(ggplot2)
library(plotly)
library(hrbrthemes)
library(openxlsx)
library(car)
library(urca)
##-------------------------------------------------------------------------------------##
#Cargamos los datos
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
Ventas_Fecha_organizada <- read_excel("./DATOS DE VENTAS FECHA MODIFICADA.xlsx",
sheet = "BASE")
datos <- Ventas_Fecha_organizada
names(datos)[15]= "ventas"
names(datos)[9]= "productos"
datos$fecha <- as.Date(datos$fecha)
datos_filtrados1 <- datos %>% select(c(ventas,fecha,productos))
datos_filtrados1
# 2- Resumimos las ventas, para tenerlas por productos
ventas_mensuales <- datos_filtrados1 %>%
group_by(productos) %>%  #Resumimos las ventas por productos, y encontramos los porductos con mas ventas con la funcion group by
summarise(ventas = sum(ventas))
ventas_productos <- ventas_mensuales[with(ventas_mensuales,order(decreasing = TRUE,ventas_mensuales$ventas)),]
ventas_productos
#3- filtramos por los 10 productos con mas ventas
ventas_fil_prod<- ventas_productos %>% filter(ventas >= ventas[10])
#-------------------------------------------------------------------------------------------#
#4- data frame final para estimacion del modelo de los 10 productos mas vendidos
ventas_mensuales_productos <- datos_filtrados1 %>%
mutate(mes = format(fecha,"%m"), year = format(fecha,"%Y")) %>%
group_by(mes,year,productos) %>%  #Resumimos las ventas por mes y a?o con la funcion group by
summarise(ventas = sum(ventas)) %>%
filter(productos == ventas_fil_prod$productos[1] | productos == ventas_fil_prod$productos[2]
| productos == ventas_fil_prod$productos[3] | productos == ventas_fil_prod$productos[4]
| productos == ventas_fil_prod$productos[5] | productos == ventas_fil_prod$productos[6]
| productos == ventas_fil_prod$productos[7] | productos == ventas_fil_prod$productos[8]
| productos == ventas_fil_prod$productos[9] | productos == ventas_fil_prod$productos[10])
ventas_mensuales_productos <- ventas_mensuales_productos[with(ventas_mensuales_productos,order(decreasing = FALSE,ventas_mensuales_productos$year)),]
ventas_mensuales_productos
###----------------------------------------------------------------------##
##----------------------------------------------------------------------##
#5- Seguimos arreglando los datos para poder hacer la proyeccion
productos_wide <- pivot_wider(ventas_mensuales_productos, names_from = productos,
values_from = ventas)
nombres<-names(productos_wide)
View(productos_wide)
productos_wide[is.na(productos_wide)] <- 0
serie1 <- productos_wide %>% select(2,4) #Data frame nuevo con el primer producto
View(serie1)
dd <- ts(serie1[3], start= c(2013,01),end =c(2022,02),frequency = 12)
dd
autoplot(dd)+ ggtitle("Grafico de ventas ", nombres[4])+ ylab("Valor de ventas") +
theme_modern_rc()
modelo_arima1 <- auto.arima(serie1_NA_estimado,d=1,D=1, stepwise = FALSE , approximation = FALSE , trace = TRUE)
modelo_arima1 <- auto.arima(dd,d=1,D=1, stepwise = FALSE , approximation = FALSE , trace = TRUE)
print(modelo_arima1)
checkresiduals(modelo_arima1)
residualPlot(modelo_arima1)
x1<-ur.df(residuales)
pronostico <- forecast(modelo_arima1, h=6, level = c(95))
autoplot(pronostico) +ggtitle("Pronostico de ventas proximos 6 meses", nombres[4])+ theme_modern_rc()
pronostico1 <- forecast(modelo_arima1, h=6, level = c(95))
autoplot(pronostico1) +ggtitle("Pronostico de ventas proximos 6 meses", nombres[4])+ theme_modern_rc()
df.pronostico1 <- as.data.frame(pronostico1)
View(df.pronostico1)
serie2 <- productos_wide %>% select(2,5) %>% filter(year > 2019)
#serie2 <- serie2[!(is.na(serie2[3])),] #Borramos los valores NA
#Creamos la serie de tiempo
dd1<- ts(serie2[3],start = c(2020,1),end = c(2022,2),frequency = 12)
dd1
#Rellenamos los valores NA de la serie (Interpolacion)
#serie2_NA_estimado<- na.interp(dd1)
#Graficamos las ventas del producto
autoplot(dd1)+ ggtitle("Grafico de ventas ", nombres[5])+ ylab("Valor de ventas") +
theme_modern_rc()
serie2 <- productos_wide %>% select(2,5)
#serie2 <- serie2[!(is.na(serie2[3])),] #Borramos los valores NA
#Creamos la serie de tiempo
dd1<- ts(serie2[3],start = c(2020,1),end = c(2022,2),frequency = 12)
dd1
#Rellenamos los valores NA de la serie (Interpolacion)
#serie2_NA_estimado<- na.interp(dd1)
#Graficamos las ventas del producto
autoplot(dd1)+ ggtitle("Grafico de ventas ", nombres[5])+ ylab("Valor de ventas") +
theme_modern_rc()
library(readxl)
library(tidyverse)
library(plotly)
#Datos GDP
gdp_percapita <- read_excel("~/Viernes de codigo/Sesion 3/gdp_percapita.xlsx")
View(gdp_percapita)
gdp <- gdp_percapita
#Datos CO2
WDI_CO2_s <-read_excel("~/Viernes de codigo/Sesion 3/WDI_CO2_s.xlsx")
View(WDI_CO2_s)
wdi <- WDI_CO2_s
#------------------------------------------------------------------------------#
#Ajustamos los nombres de las columnas
colnames(wdi)[2]<-"serie"
colnames(wdi)[3]<-"country"
colnames(wdi)[4]<-"ccode"
colnames(wdi)[5]<-1997
#Para no hacerlo año por año, usamos un loop
i<-5
while (i <29){
i<-i+1
colnames(wdi)[i]<-1997+i-5
}
#Acortamos los nombres de la columna serie (Nos interesan)
wdi<-wdi%>%mutate(variable=ifelse(serie=="EN.ATM.GHGT.KT.CE","total_ghg",ifelse(serie=="EN.ATM.CO2E.KT","total_co2",
ifelse(serie=="EN.ATM.CO2E.PP.GD.KD","co2_pib",
ifelse(serie=="SP.POP.TOTL","pop","")))))
#Seleccionamos las nuevas columnas
wdi<-wdi%>%select(-c(`Series Name`,serie,))
#Cambiamos la estructura de las variables
wdi<-wdi%>%pivot_longer(!c(country,ccode,variable),names_to="year",values_to="value")
wdi<-wdi%>%filter(!is.na(country)) # eliminamos los valores missing para la columna country
#Segundo paso hacer un wider
wdi1<-wdi%>%pivot_wider(id_cols=c(country,ccode,year),names_from=variable,values_from=value)
wdi1[wdi1==".."]<-NA
#Primera froma de cambiar el tipo de dato de la columna
wdi1$year <- as.numeric(wdi1$year)
class(wdi1$year)
#Segunda forma
i<-c(3:7)
wdi1[,i]<-apply(wdi1[,i],2,function(x)as.numeric(x)) # así hacemos todas las columnas de una vez
sapply(wdi1,class)
#-------------------------------------------------------------------------------#
# Segunda base de datos
#Ajustamos los nombres
colnames(gdp)[4]<-"serie"
colnames(gdp)[1]<-"country"
colnames(gdp)[2]<-"ccode"
colnames(gdp)[5]<-1997
#Para no hacerlo año por año, usamos un loop
i<-5
while (i <29){
i<-i+1
colnames(gdp)[i]<-1997+i-5
}
#
#Acortamos los nombres de la columna serie (Nos interesan)
gdp<-gdp%>%mutate(variable=ifelse(serie=="NY.GDP.PCAP.PP.KD","GDP_Per"))
#Seleccionamos las nuevas columnas
gdp<-gdp%>%select(-c(`Series Name`,serie,variable))
#hacemos el pivot longer y wider
gdp<-gdp%>%pivot_longer(!c(country,ccode),names_to="year",values_to="gdp")
gdp<-gdp%>%filter(!is.na(country))
gdp[gdp==".."]<-NA
#Cambiar el tipo de dato
i<-c(3:4)
gdp[,i]<-apply(gdp[,i],2,function(x)as.numeric(x)) # así hacemos todas las columnas de una vez
sapply(gdp,class)
#-------------------------------------------------------------------------------------------------#
#Juntar las bases de datos
wdi1<-left_join(wdi1,gdp,by=c("ccode","year","country"))
#Analizamos los datos
ghg.plot<-wdi1%>%filter(year==2019)%>%plot_ly(y=~total_ghg,x=~ccode,type="bar",name="Total")
ghg.plot
#Ordenamos de forma desendente
ghg.plot<-ghg.plot%>%
layout(xaxis=list(categoryorder="total descending"))
ghg.plot
#Creamos una nueva variable en nuestro data frame
wdi1 <- wdi1 %>% mutate(epc= total_ghg/pop)
#Creamos la grafica interactiva
ghg.plot1 <- wdi1 %>% filter(year==2019) %>% plot_ly(y=~epc,x=~ccode,type="bar",name="Total")
ghg.plot1
ghg.plot1<-ghg.plot1%>%
layout(xaxis=list(categoryorder="total descending"))
ghg.plot1
#Buscamos la relacion entre el ingreso y las emisiones
gy<-wdi1%>%filter(year==2019)%>%plot_ly(x=~gdp,y=~epc,type="scatter", text=~ccode)
gy
#Veamos como el ingreso ha aumentado durante los años
total<-wdi1%>%group_by(year)%>%summarise(total=sum(total_ghg,na.rm=TRUE))
total1 <- total %>% filter(year < 2020)
ghgtot.plot<-total1%>%plot_ly(x=~year,y=~total,type="scatter",mode="lines")
ghgtot.plot
subplot(ghg.plot,ghg.plot1,gy,ghgtot.plot,nrows=2)
View(gdp)
View(wdi1)
View(wdi1)
graph_estatica<-ggplot(wdi1, aes(gdp, epc))
graph_estatica
graph_estatica<-ggplot(wdi1, aes(gdp, epc))+ geom_point()
graph_estatica
ghg.plot1 <- wdi1 %>% filter(year==2019) %>% plot_ly(y=~epc,x=~ccode,type="bar",name="Total")
ghg.plot1
wdi2 <- filter(wdi1$year == 2019)
#Creamos la grafica Estatica
wdi2 <- filter(wdi1$year == 2019)
#Creamos la grafica Estatica
wdi2 <- wdi1 %>% filter(year == 2019)
View(wdi2)
graph_estatica<-ggplot(wdi2, aes(gdp, epc))+ geom_point(aes(colour=))
graph_estatica<-ggplot(wdi2, aes(gdp, epc))+ geom_point() + ggtitle("Relacion GDP y EPC")
graph_estatica
gy<-wdi1%>%filter(year==2019)%>%plot_ly(x=~gdp,y=~epc,type="scatter", text=~ccode)
gy
graph_estatica<-ggplot(wdi2, aes(gdp, epc))+ geom_point() + ggtitle("Relacion GDP y EPC")
graph_estatica
View(wdi2)
wdi2 <- wdi1 %>% filter(year == 2019)
graph_estatica<-ggplot(wdi2, aes(gdp, epc))+ geom_point() +
ggtitle("Relacion GDP y EPC") + aes(color = class)
graph_estatica
graph_estatica<-ggplot(wdi2, aes(gdp, epc))+ geom_point() +
ggtitle("Relacion GDP y EPC") + labs(caption = "Hola")
graph_estatica
#Creamos la grafica Estatica
wdi2 <- wdi1 %>% filter(year >2014)
View(wdi2)
#Creamos la grafica Estatica
wdi2 <- wdi1 %>% filter(year >2014 , year < 2020)
graph_estatica<-ggplot(wdi2, aes(gdp, epc, color=factor(year)))+ geom_point() +
ggtitle("Relacion GDP y EPC") + labs(caption = "Hola")
graph_estatica
graph_estatica<-ggplot(wdi2, aes(gdp, epc, color=factor(year)))+ geom_point() +
ggtitle("Relacion GDP y EPC",wdi2[8]) + labs(caption = "Hola")
graph_estatica
library(tidyverse)
library(magrittr)
library(dplyr)
library(lubridate)
library(tidyr)
library(fpp2)
library(readxl)
library(astsa)
library(tseries)
library(ggplot2)
library(plotly)
library(hrbrthemes)
library(openxlsx)
library(car)
library(urca)
##-------------------------------------------------------------------------------------##
#Cargamos los datos
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
Ventas_Fecha_organizada <- read_excel("./DATOS DE VENTAS FECHA MODIFICADA.xlsx",
sheet = "BASE")
datos <- Ventas_Fecha_organizada
names(datos)[15]= "ventas"
names(datos)[9]= "productos"
datos$fecha <- as.Date(datos$fecha) #-> Funcion para establecer el tipo de dato como fecha
class(datos$fecha)
# 1- Seleccionamos los datos que queremos
datos_filtrados1 <- datos %>% select(c(ventas,fecha,productos))
datos_filtrados1
# 2- Resumimos las ventas, para tenerlas por productos
ventas_mensuales <- datos_filtrados1 %>%
group_by(productos) %>%  #Resumimos las ventas por productos, y encontramos los porductos con mas ventas con la funcion group by
summarise(ventas = sum(ventas))
ventas_productos <- ventas_mensuales[with(ventas_mensuales,order(decreasing = TRUE,ventas_mensuales$ventas)),]
ventas_productos
#3- filtramos por los 10 productos con mas ventas
ventas_fil_prod<- ventas_productos %>% filter(ventas >= ventas[10])
#-------------------------------------------------------------------------------------------#
#4- data frame final para estimacion del modelo de los 10 productos mas vendidos
ventas_mensuales_productos <- datos_filtrados1 %>%
mutate(mes = format(fecha,"%m"), year = format(fecha,"%Y")) %>%
group_by(mes,year,productos) %>%  #Resumimos las ventas por mes y a?o con la funcion group by
summarise(ventas = sum(ventas)) %>%
filter(productos == ventas_fil_prod$productos[1] | productos == ventas_fil_prod$productos[2]
| productos == ventas_fil_prod$productos[3] | productos == ventas_fil_prod$productos[4]
| productos == ventas_fil_prod$productos[5] | productos == ventas_fil_prod$productos[6]
| productos == ventas_fil_prod$productos[7] | productos == ventas_fil_prod$productos[8]
| productos == ventas_fil_prod$productos[9] | productos == ventas_fil_prod$productos[10])
ventas_mensuales_productos <- ventas_mensuales_productos[with(ventas_mensuales_productos,order(decreasing = FALSE,ventas_mensuales_productos$year)),]
ventas_mensuales_productos
###----------------------------------------------------------------------##
##----------------------------------------------------------------------##
#5- Seguimos arreglando los datos para poder hacer la proyeccion
productos_wide <- pivot_wider(ventas_mensuales_productos, names_from = productos,
values_from = ventas)
serie1 <- productos_wide %>% select(2,4) #Data frame nuevo con el primer producto
#serie1 <- serie1[!(is.na(serie1[3])),]  #Borramos los valores NA de la fila del producto
#Creamos la serie de tiempo
dd <- ts(serie1[3], start= c(2013,01),end =c(2022,02),frequency = 12)
dd
#Rellenamos los valores NA de la serie (Interpolacion)
#serie1_NA_estimado<- na.interp(dd)
#Graficamos las ventas del producto
autoplot(dd)+ ggtitle("Grafico de ventas ", nombres[4])+ ylab("Valor de ventas") +
theme_modern_rc()
#Rellenamos los valores NA de la serie (Interpolacion)
#serie1_NA_estimado<- na.interp(dd)
nombre <- names(productos_wide)
#Rellenamos los valores NA de la serie (Interpolacion)
#serie1_NA_estimado<- na.interp(dd)
nombres <- names(productos_wide)
autoplot(dd)+ ggtitle("Grafico de ventas ", nombres[4])+ ylab("Valor de ventas") +
theme_modern_rc()
wdi2 <- wdi1 %>% filter(year >2014 , year < 2020)
graph_estatica<-ggplot(wdi2, aes(gdp, epc, color=factor(year)))+ geom_point() +
ggtitle("Relacion GDP y EPC") + labs(caption = "Viernes de codigo",color = "Years")
graph_estatica
graph_estatica<-ggplot(wdi2, aes(gdp, epc, color=factor(year)))+ geom_point() +
ggtitle("Relacion GDP y EPC") + labs(caption = "Viernes de codigo",color = "Years",
x= "Emisiones de CO2 Per capita",
y= "Producto interno bruto per capita")
graph_estatica
graph_estatica<-ggplot(wdi2, aes(gdp, epc, color=factor(year)))+ geom_point() +
ggtitle("Relacion GDP y EPC") + labs(caption = "Viernes de codigo",color = "Years",
x= "Producto interno bruto per capita",
y= "Emisiones de CO2 per capita")
graph_estatica
graph_estatica<-ggplot(wdi2, aes(gdp, epc, color=factor(year)))+ geom_point() +
ggtitle("Relacion GDP y EPC") + labs(caption = "Viernes de codigo",color = "Years",
x= "Producto interno bruto per capita (dolares)",
y= "Emisiones de CO2 per capita (t de CO2 equivalente)")
graph_estatica
graph_estatica<-ggplot(wdi2, aes(gdp, epc, color=factor(year)))+ geom_point() +
ggtitle("Relacion GDP y EPC") + labs(caption = "Viernes de codigo",color = "Years",
x= "PIB per capita (dolares)",
y= "Emisiones de CO2 per capita (t de CO2 equivalente)")
graph_estatica
graph_estatica<-ggplot(wdi2, aes(gdp, epc, color=factor(year)))+ geom_point() +
ggtitle("Relacion GDP y EPC") + labs(subtitle = "2015-2016",caption = "Fuente: Banco Mundial",color = "Years",
x= "PIB per capita (dolares)",
y= "Emisiones de CO2 per capita (t de CO2 equivalente)") + theme_dark()
graph_estatica
graph_estatica<-ggplot(wdi2, aes(gdp, epc, color=factor(year)))+ geom_point() +
ggtitle("Relacion GDP y EPC") + labs(subtitle = "2015-2016",caption = "Fuente: Banco Mundial",color = "Years",
x= "PIB per capita (dolares)",
y= "Emisiones de CO2 per capita (t de CO2 equivalente)") + theme_ft_rc()
graph_estatica
graph_estatica<-ggplot(wdi2, aes(gdp, epc, color=factor(year)))+ geom_point() +
ggtitle("Relacion GDP y EPC") + labs(subtitle = "2015-2016",caption = "Fuente: Banco Mundial",color = "Years",
x= "PIB per capita (dolares)",
y= "Emisiones de CO2 per capita (t de CO2 equivalente)") + theme_minimal()
graph_estatica
graph_estatica<-ggplot(wdi2, aes(gdp, epc, color=factor(year)))+ geom_point() +
ggtitle("Relacion GDP y EPC") + labs(subtitle = "2015-2016",caption = "Fuente: Banco Mundial",color = "Years",
x= "PIB per capita (dolares)",
y= "Emisiones de CO2 per capita (t de CO2 equivalente)") + theme_ft_rc()
graph_estatica
graph_estatica<-ggplot(wdi2, aes(gdp, epc, color=factor(year)))+ geom_point() +
ggtitle("Relacion GDP y EPC") + labs(subtitle = "2015-2016",caption = "Fuente: Banco Mundial",color = "Years",
x= "PIB per capita (dolares)",
y= "Emisiones de CO2 per capita (t de CO2 equivalente)") + theme_ft_rc()+
geom_smooth()
graph_estatica
graph_estatica<-ggplot(wdi2, aes(gdp, epc))+ geom_point(color = "#000033") +
ggtitle("Relacion GDP y EPC") + labs(subtitle = "2015-2016",caption = "Fuente: Banco Mundial",color = "Years",
x= "PIB per capita (dolares)",
y= "Emisiones de CO2 per capita (t de CO2 equivalente)") + theme_ft_rc()+
geom_smooth()
graph_estatica
graph_estatica<-ggplot(wdi2, aes(gdp, epc))+ geom_point(color = "#99CCFF") +
ggtitle("Relacion GDP y EPC") + labs(subtitle = "2015-2016",caption = "Fuente: Banco Mundial",color = "Years",
x= "PIB per capita (dolares)",
y= "Emisiones de CO2 per capita (t de CO2 equivalente)") + theme_ft_rc()+
geom_smooth()
graph_estatica
graph_estatica<-ggplot(wdi2, aes(gdp, epc, color=factor(year)))+ geom_point() +
ggtitle("Relacion GDP y EPC") + labs(subtitle = "2015-2016",caption = "Fuente: Banco Mundial",color = "Years",
x= "PIB per capita (dolares)",
y= "Emisiones de CO2 per capita (t de CO2 equivalente)") + theme_ft_rc()+
geom_smooth()
graph_estatica
graph_estatica<-ggplot(wdi2, aes(gdp, epc, color= year))+ geom_point() +
ggtitle("Relacion GDP y EPC") + labs(subtitle = "2015-2016",caption = "Fuente: Banco Mundial",color = "Years",
x= "PIB per capita (dolares)",
y= "Emisiones de CO2 per capita (t de CO2 equivalente)") + theme_ft_rc()+
geom_smooth()
graph_estatica
graph_estatica<-ggplot(wdi2, aes(gdp, epc, color=factor(year)))+ geom_point() +
ggtitle("Relacion GDP y EPC") + labs(subtitle = "2015-2016",caption = "Fuente: Banco Mundial",color = "Years",
x= "PIB per capita (dolares)",
y= "Emisiones de CO2 per capita (t de CO2 equivalente)") + theme_ft_rc()
graph_estatica
graph_estatica<-ggplot(wdi2, aes(gdp, epc, color=factor(year)))+ geom_point() +
ggtitle("Relacion GDP y EPC") + labs(subtitle = "2015-2016",caption = "Fuente: Banco Mundial",color = "Years",
x= "PIB per capita (dolares)",
y= "Emisiones de CO2 per capita (t de CO2 equivalente)") + theme_ft_rc()+
theme(legend.position = "bottom")
graph_estatica
graph_estatica<-ggplot(wdi2, aes(gdp, epc, color=factor(year)))+ geom_point() +
ggtitle("Relacion GDP y EPC") + labs(subtitle = "2015-2016",caption = "Fuente: Banco Mundial",color = "Years",
x= "PIB per capita (dolares)",
y= "Emisiones de CO2 per capita (t de CO2 equivalente)") + theme_ft_rc()+
theme(legend.position = "top")
graph_estatica
