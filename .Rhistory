library(magrittr)
library(dplyr)
library(lubridate)
library(fpp2)
##-------------------------------------------------------------------------------------##
#Cargamos los datos
DATOS_DE_VENTAS_FECHA_MODIFICADA <- read_excel("Daniel Echavez/Ventas Serie de tiempo/DATOS DE VENTAS FECHA MODIFICADA.xlsx",
sheet = "BASE")
datos <- DATOS_DE_VENTAS_FECHA_MODIFICADA
names(datos)[15]= "ventas"
datos$fecha <- as.Date(datos$fecha) #-> Funcion para establecer el tipo de dato como fecha
class(datos$fecha)
datos_filtrados <- datos %>% select(c(ventas,fecha))
datos_filtrados
ventas_mensuales <- datos_filtrados %>%
mutate(mes = format(fecha,"%m"), año = format(fecha,"%Y")) %>%
group_by(mes,año) %>%
summarise(ventas = sum(ventas))
ventas_mensuales <- ventas_mensuales[with(ventas_mensuales,order(ventas_mensuales$año)),]
ventas_mensuales<- ventas_mensuales[-c(1), ] #
Y <- ts(ventas_mensuales[,3], start = c(2013,1), end = c(2022,5),frequency = 12)
autoplot(Y) + ggtitle("Ventas en el tiempo e2 Energia Eficiente")+
ylab("VR TOTAL M$000")
descom= decompose(Y)
autoplot(descom)
acf(Y)
pacf(Y)
autoplot(descom)
#Base de datos con solo barranquilla
baq<-filter(ipcs,ciudad=="BARRANQUILLA")
View(baq)
baq<-mutate(baq,inf=((ipc/lag(ipc,n=12L))-1)*100)
ipcs<-ipcs%>%group_by(ciudad)%>%
mutate(inf=((ipc/lag(ipc,n=12L))-1)*100)
install.packages("astsa")
install.packages("plotly")
install.packages("hrbrthemes")
##-------------------------------------------------------------------------------------##
#Cargamos los datos
Ventas_Fecha_organizada <- read_excel("D:/1- Escritorio organizado/Ventas serie de tiempo/DATOS DE VENTAS FECHA MODIFICADA.xlsx",
sheet = "BASE")
Ventas_Fecha_organizada <- read_excel("Daniel Echavez/Ventas Serie de tiempo/DATOS DE VENTAS FECHA MODIFICADA.xlsx",
Ventas_Fecha_organizada <- read_excel("Daniel Echavez/Ventas Serie de tiempo/DATOS DE VENTAS FECHA MODIFICADA.xlsx",
sheet = "BASE")
Ventas_Fecha_organizada <- read_excel("Daniel Echavez/Ventas Serie de tiempo/DATOS DE VENTAS FECHA MODIFICADA.xlsx",
library(readxl)
DATOS_DE_VENTAS_FECHA_MODIFICADA <- read_excel("Daniel Echavez/Ventas Serie de tiempo/DATOS DE VENTAS FECHA MODIFICADA.xlsx",
sheet = "BASE")
View(DATOS_DE_VENTAS_FECHA_MODIFICADA)
Ventas_Fecha_organizada <- read_excel("Daniel Echavez/Ventas Serie de tiempo/DATOS DE VENTAS FECHA MODIFICADA.xlsx",
+     sheet = "BASE")
DATOS_DE_VENTAS_FECHA_MODIFICADA <- read_excel("Daniel Echavez/Ventas Serie de tiempo/DATOS DE VENTAS FECHA MODIFICADA.xlsx",
sheet = "BASE")
##----------------------------------------------------------------------------------------##
### Organizamos los datos
datos <- DATOS_DE_VENTAS_FECHA_MODIFICADA
names(datos)[15]= "ventas"
datos$fecha <- as.Date(datos$fecha) #-> Funcion para establecer el tipo de dato como fecha
class(datos$fecha)
datos_filtrados <- datos %>% select(c(ventas,fecha))
datos_filtrados
ventas_mensuales <- datos_filtrados %>%
mutate(mes = format(fecha,"%m"), a?o = format(fecha,"%Y")) %>%
ventas_mensuales <- datos_filtrados %>%
mutate(mes = format(fecha,"%m"), año = format(fecha,"%Y")) %>%
group_by(mes,año) %>%  #Resumimos las ventas por mes y a?o con la funcion group by
summarise(ventas = sum(ventas))
ventas_mensuales <- ventas_mensuales[with(ventas_mensuales,order(ventas_mensuales$a?o)),]
ventas_mensuales <- datos_filtrados %>%
mutate(mes = format(fecha,"%m"), año = format(fecha,"%Y")) %>%
group_by(mes,año) %>%  #Resumimos las ventas por mes y año con la funcion group by
summarise(ventas = sum(ventas))
ventas_mensuales <- ventas_mensuales[with(ventas_mensuales,order(ventas_mensuales$año)),]
ventas_mensuales
#Corregimos los valores NA que da?an la estimacion
ventas_mensuales1 <- ventas_mensuales[-c(1),]
y <- ts(ventas_mensuales1["ventas"] , start = c(2013,1), end = c(2022,5), frequency = 12)
y
autoplot(y) + ggtitle("Grafico de ventas en el tiempo e2 Energia eficiente") +
ylab("VR TOTAL M$000")+theme_modern_rc()
library(hrbrthemes)
library(plotly)
autoplot(y) + ggtitle("Grafico de ventas en el tiempo e2 Energia eficiente") +
ylab("VR TOTAL M$000")+theme_modern_rc()
ddatos <- diff(y)
adf.test(ddatos, alternative = "stationary")
library(tidyverse)
library(magrittr)
library(dplyr)
library(lubridate)
library(tidyr)
library(fpp2)
library(readxl)
library(astsa)
library(tseries)
library(ggplot2)
library(plotly)
library(hrbrthemes)
library(readxl)
ddatos <- diff(y)
adf.test(ddatos, alternative = "stationary")
ggseasonplot(ddatos) + ggtitle("Grafico estacional: cambios en las ventas mensuales") +
ylab("VR TOTAL M$000")+ theme_modern_rc()
modelo_arima <- auto.arima(y,d=1,D=1,stepwise = F , approximation = F , trace = T)
print(summary(modelo_arima))
checkresiduals(modelo_arima)
pronostico <- forecast(modelo_arima, h=6, level = c(95))
autoplot(pronostico) +ggtitle("Pronostico de ventas proximos 6 meses")+ theme_bw()
df.pronostico <- as.data.frame(pronostico)
View(df.pronostico)
install.packages("openxlsx")
library(openxlsx)
write.xlsx(df.pronostico,"pronostico.xlsx")
write.xlsx(df.pronostico,"pronostico.xlsx")
write.xlsx(df.pronostico,"pronostico1.xlsx", asTable = TRUE)
write.xlsx(ventas_mensuales1,"ventas.xlsx", asTable = TRUE)
DATOS_DE_VENTAS_FECHA_MODIFICADA <- read_excel("Daniel Echavez/Ventas Serie de tiempo/DATOS DE VENTAS FECHA MODIFICADA.xlsx",
sheet = "BASE")
datos <- DATOS_DE_VENTAS_FECHA_MODIFICADA
names(datos)[15]= "ventas"
datos$fecha <- as.Date(datos$fecha) #-> Funcion para establecer el tipo de dato como fecha
class(datos$fecha)
datos_filtrados <- datos %>% select(c(ventas,fecha))
datos_filtrados
View(datos_filtrados)
ventas_mensuales <- datos_filtrados %>%
mutate(mes = format(fecha,"%m"), año = format(fecha,"%Y")) %>%
group_by(mes,año) %>%  #Resumimos las ventas por mes y año con la funcion group by
summarise(ventas = sum(ventas))
ventas_mensuales <- ventas_mensuales[with(ventas_mensuales,order(ventas_mensuales$año)),]
ventas_mensuales
View(ventas_mensuales)
#Corregimos los valores NA que da?an la estimacion
ventas_mensuales1 <- ventas_mensuales[-c(1),]
#Corregimos los valores NA que da?an la estimacion
ventas_mensuales1 <- ventas_mensuales[-c(1),]
View(ventas_mensuales1)
y <- ts(ventas_mensuales1["ventas"] , start = c(2013,1), end = c(2022,5), frequency = 12)
y
autoplot(y) + ggtitle("Grafico de ventas en el tiempo e2 Energia eficiente") +
ylab("VR TOTAL M$000")+theme_modern_rc()
ddatos <- diff(y)
adf.test(ddatos, alternative = "stationary")
ggseasonplot(ddatos) + ggtitle("Grafico estacional: cambios en las ventas mensuales") +
ylab("VR TOTAL M$000")+ theme_modern_rc()
decom = decompose(ddatos)
autoplot(decom)
modelo_arima <- auto.arima(y,d=1,D=1,stepwise = F , approximation = F , trace = T)
print(summary(modelo_arima))
checkresiduals(modelo_arima)
pronostico <- forecast(modelo_arima, h=6, level = c(95))
autoplot(pronostico) +ggtitle("Pronostico de ventas proximos 6 meses")+ theme_bw()
df.pronostico <- as.data.frame(pronostico)
library(readxl)
PIB <- read_excel("Viernes de codigo/PIB.xlsx")
View(PIB)
#Importamos los datos
pib <- read_excel("Viernes de codigo/PIB.xlsx")
#Importamos los datos
pib <- read_excel("Viernes de codigo/PIB.xlsx")
#E
class(pib$trimestre)
pib$trimestre <- as.Date(pib$trimestre)
class(pib$trimestre)
pib$trimestre <- as.Date(pib$trimestre)
class(pib$trimestre)
#2- calculamos la de crecimiento anual del pib, con datos trimestrales
pib <- mutate(pib, inf=((y/lag(y,n=14)-1)))
pib$trimestre <- as.Date(pib$trimestre)
class(pib$trimestre)
#2- calculamos la de crecimiento anual del pib, con datos trimestrales
pib <- mutate(pib, inf=((y/lag(y,n=4)-1)))
pib <- mutate(pib, inf=((pib$Y/lag(pib$Y,n=4L))-1)
pib <- mutate(pib, inf=((pib$Y/lag(pib$Y,n=4L))-1)
pibplot <- ggplot(pib,aes(x= pib$trimestre , y= pib$Y)) + geom_line()
pibplot
pibplot <- ggplot(pib,aes(x=trimestre , y= Y)) + geom_line()
pibplot
pibplot <- ggplot(pib,aes(x=trimestre , y=inf)) + geom_line()
pibplot
pib <- read_excel("Viernes de codigo/PIB.xlsx")
#E
pib$trimestre <- as.Date(pib$trimestre)
class(pib$trimestre)
#2- calculamos la de crecimiento anual del pib, con datos trimestrales
pib <- mutate(pib, inf=((pib$Y/lag(pib$Y,n=4L))-1)
#3- Graficamos
pibplot <- ggplot(pib,aes(x=trimestre , y=inf)) + geom_line()
pib <- mutate(pib, inf=((pib$Y/lag(pib$Y,n=4L))-1))
library(readxl)
library(dplyr)
library(ggplot2)
#Importamos los datos
pib <- read_excel("Viernes de codigo/PIB.xlsx")
#E
pib$trimestre <- as.Date(pib$trimestre)
class(pib$trimestre)
#2- calculamos la de crecimiento anual del pib, con datos trimestrales
pib <- mutate(pib, inf=((pib$Y/lag(pib$Y,n=4L))-1))
#3- Graficamos
pibplot <- ggplot(pib,aes(x=trimestre , y=inf)) + geom_line()
pibplot
pibplot <- ggplot(pib,aes(x=trimestre , y=inf)) + geom_line() + ggtitle("Crecimiento anual del PIB por trimestres") + theme_bw()
pibplot
View(pibplot)
View(pib)
pib<-pib%>%mutate(wc = (lag(C,n=4L)/lag(Y,n=4L)) *(C -(lag(C,n=4L))/lag(C,n=4L)) ,
wi = (lag(I,n=4L)/lag(Y,n=4L)) *(I -(lag(I,n=4L))/lag(I,n=4L)),
wg = (lag(G,n=4L)/lag(Y,n=4L)) *(G -(lag(G,n=4L))/lag(G,n=4L)),
wx = (lag(X,n=4L)/lag(Y,n=4L)) *(X -(lag(G,n=4L))/lag(X,n=4L)),
wm = (lag(M,n=4L)/lag(Y,n=4L)) *(M -(lag(G,n=4L))/lag(M,n=4L)))
View(pib)
pib <- pib %>% mutate(gy= wc + wi + wg + wx - wm)
piblong<-pib%>%na.omit()%>%select(trimestre,gy,wc,wi,wg,wx,wm)
piblong<-pivot_longer(piblong,!c(trimestre,gy), names_to="comp",values_to="value")
library(tidyverse)
# 5-
piblong<-pib%>%na.omit()%>%select(trimestre,gy,wc,wi,wg,wx,wm)
piblong<-pivot_longer(piblong,!c(trimestre,gy), names_to="comp",values_to="value")
ggplot(piblong,aes(x=,y=,fill=comp))+geom_bar(stat="identity")+geom_line(aes(y=gy),size=1)
View(piblong)
ggplot(piblong,aes(x=trimestre,y=value,fill=comp))+geom_bar(stat="identity")+geom_line(aes(y=gy),size=1)
#4-
pib<-pib%>%mutate(wc = (lag(C,n=4L)/lag(Y,n=4L)) *((C -(lag(C,n=4L)))/lag(C,n=4L)) ,
wi = (lag(I,n=4L)/lag(Y,n=4L)) *((I -(lag(I,n=4L)))/lag(I,n=4L)),
wg = (lag(G,n=4L)/lag(Y,n=4L)) *((G -(lag(G,n=4L)))/lag(G,n=4L)),
wx = (lag(X,n=4L)/lag(Y,n=4L)) *((X -(lag(G,n=4L)))/lag(X,n=4L)),
wm = (lag(M,n=4L)/lag(Y,n=4L)) *((M -(lag(G,n=4L)))/lag(M,n=4L)))
pib <- pib %>% mutate(gy= wc + wi + wg + wx - wm)
# 5-
piblong<-pib%>%na.omit()%>%select(trimestre,gy,wc,wi,wg,wx,wm)
piblong<-pivot_longer(piblong,!c(trimestre,gy), names_to="comp",values_to="value")
ggplot(piblong,aes(x=trimestre,y=value,fill=comp))+geom_bar(stat="identity")+geom_line(aes(y=gy),size=1)
#4-
pib<-pib%>%mutate(wc = (lag(C,n=4L)/lag(Y,n=4L)) *((C -(lag(C,n=4L)))/lag(C,n=4L)) ,
wi = (lag(I,n=4L)/lag(Y,n=4L)) *((I -(lag(I,n=4L)))/lag(I,n=4L)),
wg = (lag(G,n=4L)/lag(Y,n=4L)) *((G -(lag(G,n=4L)))/lag(G,n=4L)),
wx = (lag(X,n=4L)/lag(Y,n=4L)) *((X -(lag(G,n=4L)))/lag(X,n=4L)),
wm = -(lag(M,n=4L)/lag(Y,n=4L)) *((M -(lag(G,n=4L)))/lag(M,n=4L)))
pib <- pib %>% mutate(gy= wc + wi + wg + wx + wm)
# 5-
piblong<-pib%>%na.omit()%>%select(trimestre,gy,wc,wi,wg,wx,wm)
piblong<-pivot_longer(piblong,!c(trimestre,gy), names_to="comp",values_to="value")
ggplot(piblong,aes(x=trimestre,y=value,fill=comp))+geom_bar(stat="identity")+geom_line(aes(y=gy),size=1)
#4-
pib<-pib%>%mutate(wc = (lag(C,n=4L)/lag(Y,n=4L)) *((C -(lag(C,n=4L)))/lag(C,n=4L)) ,
wi = (lag(I,n=4L)/lag(Y,n=4L)) *((I -(lag(I,n=4L)))/lag(I,n=4L)),
wg = (lag(G,n=4L)/lag(Y,n=4L)) *((G -(lag(G,n=4L)))/lag(G,n=4L)),
wx = (lag(X,n=4L)/lag(Y,n=4L)) *((X -(lag(G,n=4L)))/lag(X,n=4L)),
wm = -(lag(M,n=4L)/lag(Y,n=4L)) *((M -(lag(G,n=4L)))/lag(M,n=4L)))
pib <- pib %>% mutate(gy= wc + wi + wg + wx + wm)
# 5-
piblong<-pib%>%na.omit()%>%select(trimestre,inf,wc,wi,wg,wx,wm)
piblong<-pivot_longer(piblong,!c(trimestre,inf), names_to="comp",values_to="value")
ggplot(piblong,aes(x=trimestre,y=value,fill=comp))+geom_bar(stat="identity")+geom_line(aes(y=gy),size=1)
#4-
pib<-pib%>%mutate(wc = (lag(C,n=4L)/lag(Y,n=4L)) *((C -(lag(C,n=4L)))/lag(C,n=4L)) ,
wi = (lag(I,n=4L)/lag(Y,n=4L)) *((I -(lag(I,n=4L)))/lag(I,n=4L)),
wg = (lag(G,n=4L)/lag(Y,n=4L)) *((G -(lag(G,n=4L)))/lag(G,n=4L)),
wx = (lag(X,n=4L)/lag(Y,n=4L)) *((X -(lag(G,n=4L)))/lag(X,n=4L)),
wm = -(lag(M,n=4L)/lag(Y,n=4L)) *((M -(lag(G,n=4L)))/lag(M,n=4L)))
pib <- pib %>% mutate(gy= wc + wi + wg + wx + wm)
# 5-
piblong<-pib%>%na.omit()%>%select(trimestre,inf,wc,wi,wg,wx,wm)
piblong<-pivot_longer(piblong,!c(trimestre,inf), names_to="comp",values_to="value")
ggplot(piblong,aes(x=trimestre,y=value,fill=comp))+geom_bar(stat="identity")+geom_line(aes(y=inf),size=1)
#4-
pib<-pib%>%mutate(wc = (lag(C,n=4L)/lag(Y,n=4L)) *((C -(lag(C,n=4L)))/lag(C,n=4L)) ,
wi = (lag(I,n=4L)/lag(Y,n=4L)) *((I -(lag(I,n=4L)))/lag(I,n=4L)),
wg = (lag(G,n=4L)/lag(Y,n=4L)) *((G -(lag(G,n=4L)))/lag(G,n=4L)),
wx = (lag(X,n=4L)/lag(Y,n=4L)) *((X -(lag(x,n=4L)))/lag(X,n=4L)),
wm = -(lag(M,n=4L)/lag(Y,n=4L)) *((M -(lag(M,n=4L)))/lag(M,n=4L)))
#4-
pib<-pib%>%mutate(wc = (lag(C,n=4L)/lag(Y,n=4L)) *((C -(lag(C,n=4L)))/lag(C,n=4L)) ,
wi = (lag(I,n=4L)/lag(Y,n=4L)) *((I -(lag(I,n=4L)))/lag(I,n=4L)),
wg = (lag(G,n=4L)/lag(Y,n=4L)) *((G -(lag(G,n=4L)))/lag(G,n=4L)),
wx = (lag(X,n=4L)/lag(Y,n=4L)) *((X -(lag(X,n=4L)))/lag(X,n=4L)),
wm = -(lag(M,n=4L)/lag(Y,n=4L)) *((M -(lag(M,n=4L)))/lag(M,n=4L)))
pib <- pib %>% mutate(gy= wc + wi + wg + wx + wm)
# 5-
piblong<-pib%>%na.omit()%>%select(trimestre,inf,wc,wi,wg,wx,wm)
piblong<-pivot_longer(piblong,!c(trimestre,inf), names_to="comp",values_to="value")
ggplot(piblong,aes(x=trimestre,y=value,fill=comp))+geom_bar(stat="identity")+geom_line(aes(y=inf),size=1)
View(piblong)
View(pib)
library(readxl)
library(tidyverse)
#Datos GDP
library(readxl)
gdp_percapita <- read_excel("Viernes de codigo/Sesion 3/gdp_percapita.xlsx")
View(gdp_percapita)
gdp <- gdp_percapita
#Datos CO2
WDI_CO2_s <- read_excel("Viernes de codigo/Sesion 3/WDI_CO2_s.xlsx")
View(WDI_CO2_s)
wdi <- WDI_CO2_s
colnames(wdi)[2]<-"serie"
colnames(wdi)[3]<-"country"
colnames(wdi)[4]<-"ccode"
colnames(wdi)[5]<-1997
View(wdi)
i<-5
while (i <29){
i<-i+1
colnames(wdi)[i]<-1997+i-5
}
wdi<-wdi%>%mutate(variable=ifelse(serie=="EN.ATM.GHGT.KT.CE","total_ghg",ifelse(serie=="EN.ATM.CO2E.KT","total_co2",
ifelse(serie=="EN.ATM.CO2E.PP.GD.KD","co2_pib",
ifelse(serie=="SP.POP.TOTL","pop","")))))
#Seleccionamos las nuevas columnas
wdi<-wdi%>%select(-c(`Series Name`,serie,))
wdi<-wdi%>%pivot_longer(!c(country,ccode,variable),names_to="year",values_to="value")
wdi<-wdi%>%filter(!is.na(country)) # eliminamos los valores missing para la columna country
#Segundo paso hacer un wider
wdi1<-wdi%>%pivot_wider(id_cols=c(country,ccode,year),names_from=variable,values_from=value)
wdi1[wdi1==".."]<-NA
View(wdi1)
wdi1$year <- as.numeric(wdi1$year)
class(year)
class(wdi1$year)
i<-4
while (i <7){
i<-i+1
wdi1[i]<-as.numeric(wdi1[i])
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
##-------------------------------------------------------------------------------------##
#Cargamos los datos
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
Ventas_Fecha_organizada <- read_excel("./DATOS DE VENTAS FECHA MODIFICADA.xlsx",
sheet = "BASE")
View(Ventas_Fecha_organizada)
datos <- Ventas_Fecha_organizada
names(datos)[15]= "ventas"
names(datos)[9]= "productos"
datos$fecha <- as.Date(datos$fecha) #-> Funcion para establecer el tipo de dato como fecha
class(datos$fecha)
datos_filtrados <- datos %>% select(c(ventas,fecha))
datos_filtrados
#Resumimos las ventas, para tenerlas por meses
ventas_mensuales <- datos_filtrados %>%
mutate(mes = format(fecha,"%m"), year = format(fecha,"%Y")) %>%
group_by(mes,year) %>%  #Resumimos las ventas por mes y a?o con la funcion group by
summarise(ventas = sum(ventas))
ventas_mensuales <- ventas_mensuales[with(ventas_mensuales,order(ventas_mensuales$year)),]
ventas_mensuales
View(ventas_mensuales)
datos_filtrados1 <- datos %>% select(c(ventas,fecha,productos))
datos_filtrados1
# 2- Resumimos las ventas, para tenerlas por productos
ventas_mensuales <- datos_filtrados1 %>%
group_by(productos) %>%  #Resumimos las ventas por productos, y encontramos los porductos con mas ventas con la funcion group by
summarise(ventas = sum(ventas))
ventas_productos <- ventas_mensuales[with(ventas_mensuales,order(decreasing = TRUE,ventas_mensuales$ventas)),]
ventas_productos
#3- filtramos por los 10 productos con mas ventas
ventas_fil_prod<- ventas_productos %>% filter(ventas >= ventas[10])
#-------------------------------------------------------------------------------------------#
#4- data frame final para estimacion del modelo de los 10 productos mas vendidos
ventas_mensuales_productos <- datos_filtrados1 %>%
mutate(mes = format(fecha,"%m"), year = format(fecha,"%Y")) %>%
group_by(mes,year,productos) %>%  #Resumimos las ventas por mes y a?o con la funcion group by
summarise(ventas = sum(ventas)) %>%
filter(productos == ventas_fil_prod$productos[1] | productos == ventas_fil_prod$productos[2]
| productos == ventas_fil_prod$productos[3] | productos == ventas_fil_prod$productos[4]
| productos == ventas_fil_prod$productos[5] | productos == ventas_fil_prod$productos[6]
| productos == ventas_fil_prod$productos[7] | productos == ventas_fil_prod$productos[8]
| productos == ventas_fil_prod$productos[9] | productos == ventas_fil_prod$productos[10])
ventas_mensuales_productos <- ventas_mensuales_productos[with(ventas_mensuales_productos,order(decreasing = FALSE,ventas_mensuales_productos$year)),]
ventas_mensuales_productos
###----------------------------------------------------------------------##
##----------------------------------------------------------------------##
#5- Seguimos arreglando los datos para poder hacer la proyeccion
productos_wide <- pivot_wider(ventas_mensuales_productos, names_from = productos,
values_from = ventas)
nombres<-names(productos_wide)
View(ventas_mensuales_productos)
View(productos_wide)
serie2 <- productos_wide %>% select(2,5) %>% filter(year > 2019)
View(serie2)
dd1<- ts(serie2[3],start = c(2020,1),end = c(2022,2),frequency = 12)
dd1
#Rellenamos los valores NA de la serie (Interpolacion)
serie2_NA_estimado<- na.interp(dd1)
autoplot(serie2_NA_estimado, series="Interpolated") +
autolayer(dd1, series="Original") +
scale_colour_manual(
values=c(`Interpolated`="red",`Original`="sky blue"))+ ggtitle("Grafico de ventas ", nombres[5])+ ylab("Valor de ventas") +
theme_modern_rc()
library(tidyverse)
library(magrittr)
library(dplyr)
library(lubridate)
library(tidyr)
library(fpp2)
library(readxl)
library(astsa)
library(tseries)
library(ggplot2)
library(plotly)
library(hrbrthemes)
library(openxlsx)
library(rio)
#Rellenamos los valores NA de la serie (Interpolacion)
serie2_NA_estimado<- na.interp(dd1)
autoplot(serie2_NA_estimado, series="Interpolated") +
autolayer(dd1, series="Original") +
scale_colour_manual(
values=c(`Interpolated`="red",`Original`="sky blue"))+ ggtitle("Grafico de ventas ", nombres[5])+ ylab("Valor de ventas") +
theme_modern_rc()
serie4 <- productos_wide %>% select(2,7) %>%
#Creamos serie de tiempo
dd3<- ts(serie3[3],start = c(2020,1),end = c(2022,2),frequency = 12)
serie4 <- productos_wide %>% select(2,7)
View(serie4)
#Creamos serie de tiempo
dd3<- ts(serie3[3],start = c(2013,1),end = c(2022,5),frequency = 12)
serie4_NA_estimado <- na.interp(dd3)
#Interpolacion
serie4_NA_estimado <- na.interp(dd3)
#Creamos serie de tiempo
dd3<- ts(serie3[3],start = c(2013,1),end = c(2022,5),frequency = 12)
dd3<- ts(serie4[3],start = c(2013,1),end = c(2022,5),frequency = 12)
dd3
#Interpolacion
serie4_NA_estimado <- na.interp(dd3)
#Graficamos las ventas del producto
autoplot(serie4_NA_estimado, series="Interpolated") +
autolayer(dd3, series="Original") +
scale_colour_manual(
values=c(`Interpolated`="red",`Original`="sky blue"))+ ggtitle("Grafico de ventas ", nombres[7])+ ylab("Valor de ventas") +
theme_modern_rc()
serie5 <- productos_wide %>% select(2,8)
#Creamos serie de tiempo
dd4<- ts(serie5[3],start = c(2020,1),end = c(2022,2),frequency = 12)
#Interpolacion
serie5_NA_estimado <- na.interp(dd4)
autoplot(serie5_NA_estimado, series="Interpolated") +
autolayer(dd4, series="Original") +
scale_colour_manual(
values=c(`Interpolated`="red",`Original`="sky blue"))+ ggtitle("Grafico de ventas ", nombres[8])+ ylab("Valor de ventas") +
theme_modern_rc()
#Creamos serie de tiempo
dd4<- ts(serie5[3],start = c(2013,1),end = c(2022,5),frequency = 12)
#Interpolacion
serie5_NA_estimado <- na.interp(dd4)
#Graficamos las ventas del producto
autoplot(serie5_NA_estimado, series="Interpolated") +
autolayer(dd4, series="Original") +
scale_colour_manual(
values=c(`Interpolated`="red",`Original`="sky blue"))+ ggtitle("Grafico de ventas ", nombres[8])+ ylab("Valor de ventas") +
theme_modern_rc()
y <- ts(ventas_mensuales1["ventas"] , start = c(2013,1), end = c(2022,5), frequency = 12)
#Corregimos los valores NA que da?an la estimacion
ventas_mensuales1 <- ventas_mensuales[-c(1),]
y <- ts(ventas_mensuales1["ventas"] , start = c(2013,1), end = c(2022,5), frequency = 12)
y
##Exploramos los datos
autoplot(y) + ggtitle("Grafico de ventas en el tiempo e2 Energia eficiente") +
ylab("VR TOTAL M$000")+theme_modern_rc()
View(ventas_mensuales1)
ventas_mensuales <- ventas_mensuales[with(ventas_mensuales,order(ventas_mensuales$year)),]
datos_filtrados <- datos %>% select(c(ventas,fecha))
datos_filtrados
#Resumimos las ventas, para tenerlas por meses
ventas_mensuales <- datos_filtrados %>%
mutate(mes = format(fecha,"%m"), year = format(fecha,"%Y")) %>%
group_by(mes,year) %>%  #Resumimos las ventas por mes y a?o con la funcion group by
summarise(ventas = sum(ventas))
ventas_mensuales <- ventas_mensuales[with(ventas_mensuales,order(ventas_mensuales$year)),]
ventas_mensuales
#Corregimos los valores NA que da?an la estimacion
ventas_mensuales1 <- ventas_mensuales[-c(1),]
###----------------------------------------------------------------------##
##----------------------------------------------------------------------##
#Declaramos los datos en una variable como serie de tiempo
y <- ts(ventas_mensuales1["ventas"] , start = c(2013,1), end = c(2022,5), frequency = 12)
y
##Exploramos los datos
autoplot(y) + ggtitle("Grafico de ventas en el tiempo e2 Energia eficiente") +
ylab("VR TOTAL M$000")+theme_modern_rc()
pronostico <- forecast(modelo_arima, h=6, level = c(95))
library(tidyverse)
library(magrittr)
library(dplyr)
library(lubridate)
library(tidyr)
library(fpp2)
library(readxl)
library(astsa)
library(tseries)
library(ggplot2)
library(plotly)
library(hrbrthemes)
library(openxlsx)
#------------------------------------------------------------------------------------#
#-------------#
#-------#
# Pronostico del modelo de ventas totales
pronostico <- forecast(modelo_arima, h=6, level = c(95))
#------------------------------------------------------------------------------------#
#-------------#
#-------#
# Pronostico del modelo de ventas totales
modelo_arima <- auto.arima(y,d=1,D=1, stepwise = FALSE , approximation = FALSE , trace = TRUE)
print(modelo_arima)
checkresiduals(modelo_arima)
pronostico <- forecast(modelo_arima, h=6, level = c(95))
autoplot(pronostico) +ggtitle("Pronostico de ventas proximos 6 meses")+ theme_bw()
pronostico
df.pronostico <- as.data.frame(pronostico)
View(df.pronostico)
