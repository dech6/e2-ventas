setwd("~/")
library(readxl)
ipc <- read_excel("Viernes de codigo/ipc.xls")
View(ipc)
library(tidyverse)
library(magrittr)
library(dplyr)
library(lubridate)
library(fpp2)
DATOS_DE_VENTAS_FECHA_MODIFICADA <- read_excel("Daniel Echavez/Ventas Serie de tiempo/DATOS DE VENTAS FECHA MODIFICADA.xlsx",
sheet = "BASE")
datos <- DATOS_DE_VENTAS_FECHA_MODIFICADA
names(datos)[15]= "ventas"
datos$fecha <- as.Date(datos$fecha) #-> Funcion para establecer el tipo de dato como fecha
class(datos$fecha)
datos_filtrados <- datos %>% select(c(ventas,fecha))
datos_filtrados
ventas_mensuales <- datos_filtrados %>%
mutate(mes = format(fecha,"%m"), año = format(fecha,"%Y")) %>%
group_by(mes,año) %>%
summarise(ventas = sum(ventas))
View(ventas_mensuales)
ventas_mensuales <- ventas_mensuales[with(ventas_mensuales,order(ventas_mensuales$año)),]
nombres <- c("daniel","jose","andres")
numeros <- c(1,2,3)
matriz <- cbind(nombres,numeros)
print(matriz)
ventas_mensuales<- ventas_mensuales[-c(1), ]
ventas_mensuales
class(matriz)
data.frame(matriz)
class(matriz)
data.frame(matriz)
class(matriz)
data.frame(matriz)
class(matriz)
data.frame(matriz)
data.frame(matriz)
df<-data.frame(matriz)
class(df)
View(df)
df$numeros <- as.numeric(df$numeros)
class(numeros)
View(ipc)
#Flitramos los datos
ipcs<-filter(ipc,ciudad=="BARRANQUILLA" | ciudad=="BOGOTÁ, D.C." | ciudad=="CALI")
View(ipcs)
#Flitramos los datos
ipcs<-filter(ipc,ciudad=="BARRANQUILLA" , ciudad=="BOGOTÁ, D.C." , ciudad=="CALI")
#Librerias
library(readxl)
library(dplyr)
#Trabajando con datos Viernes de codigo
#Cargamos los datos
ipc <- read_excel("Viernes de codigo/ipc.xls")
#Flitramos los datos
ipcs<-filter(ipc,ciudad=="BARRANQUILLA" , ciudad=="BOGOTÁ, D.C." , ciudad=="CALI")
#Flitramos los datos
ipcs<-filter(ipc,ciudad=="BARRANQUILLA" | ciudad=="BOGOTÁ, D.C." | ciudad=="CALI")
library(lubridate)
View(ipc)
#Nueva columna con la fecha completa
ipcs$dia<-1
ipcs<-mutate(ipcs,date=make_date(year,mes,dia))
class(date)
class(ipcs$date)
ventas_mensuales<- ventas_mensuales[-c(1), ] #Borramos la fila que no nos sirve
library(tidyverse)
library(magrittr)
library(dplyr)
library(lubridate)
library(fpp2)
##-------------------------------------------------------------------------------------##
#Cargamos los datos
DATOS_DE_VENTAS_FECHA_MODIFICADA <- read_excel("Daniel Echavez/Ventas Serie de tiempo/DATOS DE VENTAS FECHA MODIFICADA.xlsx",
sheet = "BASE")
datos <- DATOS_DE_VENTAS_FECHA_MODIFICADA
names(datos)[15]= "ventas"
datos$fecha <- as.Date(datos$fecha) #-> Funcion para establecer el tipo de dato como fecha
class(datos$fecha)
datos_filtrados <- datos %>% select(c(ventas,fecha))
datos_filtrados
ventas_mensuales <- datos_filtrados %>%
mutate(mes = format(fecha,"%m"), año = format(fecha,"%Y")) %>%
group_by(mes,año) %>%
summarise(ventas = sum(ventas))
ventas_mensuales <- ventas_mensuales[with(ventas_mensuales,order(ventas_mensuales$año)),]
ventas_mensuales<- ventas_mensuales[-c(1), ] #
Y <- ts(ventas_mensuales[,3], start = c(2013,1), end = c(2022,5),frequency = 12)
autoplot(Y) + ggtitle("Ventas en el tiempo e2 Energia Eficiente")+
ylab("VR TOTAL M$000")
descom= decompose(Y)
autoplot(descom)
acf(Y)
pacf(Y)
autoplot(descom)
#Base de datos con solo barranquilla
baq<-filter(ipcs,ciudad=="BARRANQUILLA")
View(baq)
baq<-mutate(baq,inf=((ipc/lag(ipc,n=12L))-1)*100)
ipcs<-ipcs%>%group_by(ciudad)%>%
mutate(inf=((ipc/lag(ipc,n=12L))-1)*100)
install.packages("astsa")
install.packages("plotly")
install.packages("hrbrthemes")
##-------------------------------------------------------------------------------------##
#Cargamos los datos
Ventas_Fecha_organizada <- read_excel("D:/1- Escritorio organizado/Ventas serie de tiempo/DATOS DE VENTAS FECHA MODIFICADA.xlsx",
sheet = "BASE")
Ventas_Fecha_organizada <- read_excel("Daniel Echavez/Ventas Serie de tiempo/DATOS DE VENTAS FECHA MODIFICADA.xlsx",
Ventas_Fecha_organizada <- read_excel("Daniel Echavez/Ventas Serie de tiempo/DATOS DE VENTAS FECHA MODIFICADA.xlsx",
sheet = "BASE")
Ventas_Fecha_organizada <- read_excel("Daniel Echavez/Ventas Serie de tiempo/DATOS DE VENTAS FECHA MODIFICADA.xlsx",
library(readxl)
DATOS_DE_VENTAS_FECHA_MODIFICADA <- read_excel("Daniel Echavez/Ventas Serie de tiempo/DATOS DE VENTAS FECHA MODIFICADA.xlsx",
sheet = "BASE")
View(DATOS_DE_VENTAS_FECHA_MODIFICADA)
Ventas_Fecha_organizada <- read_excel("Daniel Echavez/Ventas Serie de tiempo/DATOS DE VENTAS FECHA MODIFICADA.xlsx",
+     sheet = "BASE")
DATOS_DE_VENTAS_FECHA_MODIFICADA <- read_excel("Daniel Echavez/Ventas Serie de tiempo/DATOS DE VENTAS FECHA MODIFICADA.xlsx",
sheet = "BASE")
##----------------------------------------------------------------------------------------##
### Organizamos los datos
datos <- DATOS_DE_VENTAS_FECHA_MODIFICADA
names(datos)[15]= "ventas"
datos$fecha <- as.Date(datos$fecha) #-> Funcion para establecer el tipo de dato como fecha
class(datos$fecha)
datos_filtrados <- datos %>% select(c(ventas,fecha))
datos_filtrados
ventas_mensuales <- datos_filtrados %>%
mutate(mes = format(fecha,"%m"), a?o = format(fecha,"%Y")) %>%
ventas_mensuales <- datos_filtrados %>%
mutate(mes = format(fecha,"%m"), año = format(fecha,"%Y")) %>%
group_by(mes,año) %>%  #Resumimos las ventas por mes y a?o con la funcion group by
summarise(ventas = sum(ventas))
ventas_mensuales <- ventas_mensuales[with(ventas_mensuales,order(ventas_mensuales$a?o)),]
ventas_mensuales <- datos_filtrados %>%
mutate(mes = format(fecha,"%m"), año = format(fecha,"%Y")) %>%
group_by(mes,año) %>%  #Resumimos las ventas por mes y año con la funcion group by
summarise(ventas = sum(ventas))
ventas_mensuales <- ventas_mensuales[with(ventas_mensuales,order(ventas_mensuales$año)),]
ventas_mensuales
#Corregimos los valores NA que da?an la estimacion
ventas_mensuales1 <- ventas_mensuales[-c(1),]
y <- ts(ventas_mensuales1["ventas"] , start = c(2013,1), end = c(2022,5), frequency = 12)
y
autoplot(y) + ggtitle("Grafico de ventas en el tiempo e2 Energia eficiente") +
ylab("VR TOTAL M$000")+theme_modern_rc()
library(hrbrthemes)
library(plotly)
autoplot(y) + ggtitle("Grafico de ventas en el tiempo e2 Energia eficiente") +
ylab("VR TOTAL M$000")+theme_modern_rc()
ddatos <- diff(y)
adf.test(ddatos, alternative = "stationary")
library(tidyverse)
library(magrittr)
library(dplyr)
library(lubridate)
library(tidyr)
library(fpp2)
library(readxl)
library(astsa)
library(tseries)
library(ggplot2)
library(plotly)
library(hrbrthemes)
library(readxl)
ddatos <- diff(y)
adf.test(ddatos, alternative = "stationary")
ggseasonplot(ddatos) + ggtitle("Grafico estacional: cambios en las ventas mensuales") +
ylab("VR TOTAL M$000")+ theme_modern_rc()
modelo_arima <- auto.arima(y,d=1,D=1,stepwise = F , approximation = F , trace = T)
print(summary(modelo_arima))
checkresiduals(modelo_arima)
pronostico <- forecast(modelo_arima, h=6, level = c(95))
autoplot(pronostico) +ggtitle("Pronostico de ventas proximos 6 meses")+ theme_bw()
df.pronostico <- as.data.frame(pronostico)
View(df.pronostico)
install.packages("openxlsx")
library(openxlsx)
write.xlsx(df.pronostico,"pronostico.xlsx")
write.xlsx(df.pronostico,"pronostico.xlsx")
write.xlsx(df.pronostico,"pronostico1.xlsx", asTable = TRUE)
write.xlsx(ventas_mensuales1,"ventas.xlsx", asTable = TRUE)
DATOS_DE_VENTAS_FECHA_MODIFICADA <- read_excel("Daniel Echavez/Ventas Serie de tiempo/DATOS DE VENTAS FECHA MODIFICADA.xlsx",
sheet = "BASE")
datos <- DATOS_DE_VENTAS_FECHA_MODIFICADA
names(datos)[15]= "ventas"
datos$fecha <- as.Date(datos$fecha) #-> Funcion para establecer el tipo de dato como fecha
class(datos$fecha)
datos_filtrados <- datos %>% select(c(ventas,fecha))
datos_filtrados
View(datos_filtrados)
ventas_mensuales <- datos_filtrados %>%
mutate(mes = format(fecha,"%m"), año = format(fecha,"%Y")) %>%
group_by(mes,año) %>%  #Resumimos las ventas por mes y año con la funcion group by
summarise(ventas = sum(ventas))
ventas_mensuales <- ventas_mensuales[with(ventas_mensuales,order(ventas_mensuales$año)),]
ventas_mensuales
View(ventas_mensuales)
#Corregimos los valores NA que da?an la estimacion
ventas_mensuales1 <- ventas_mensuales[-c(1),]
#Corregimos los valores NA que da?an la estimacion
ventas_mensuales1 <- ventas_mensuales[-c(1),]
View(ventas_mensuales1)
y <- ts(ventas_mensuales1["ventas"] , start = c(2013,1), end = c(2022,5), frequency = 12)
y
autoplot(y) + ggtitle("Grafico de ventas en el tiempo e2 Energia eficiente") +
ylab("VR TOTAL M$000")+theme_modern_rc()
ddatos <- diff(y)
adf.test(ddatos, alternative = "stationary")
ggseasonplot(ddatos) + ggtitle("Grafico estacional: cambios en las ventas mensuales") +
ylab("VR TOTAL M$000")+ theme_modern_rc()
decom = decompose(ddatos)
autoplot(decom)
modelo_arima <- auto.arima(y,d=1,D=1,stepwise = F , approximation = F , trace = T)
print(summary(modelo_arima))
checkresiduals(modelo_arima)
pronostico <- forecast(modelo_arima, h=6, level = c(95))
autoplot(pronostico) +ggtitle("Pronostico de ventas proximos 6 meses")+ theme_bw()
df.pronostico <- as.data.frame(pronostico)
library(readxl)
PIB <- read_excel("Viernes de codigo/PIB.xlsx")
View(PIB)
#Importamos los datos
pib <- read_excel("Viernes de codigo/PIB.xlsx")
#Importamos los datos
pib <- read_excel("Viernes de codigo/PIB.xlsx")
#E
class(pib$trimestre)
pib$trimestre <- as.Date(pib$trimestre)
class(pib$trimestre)
pib$trimestre <- as.Date(pib$trimestre)
class(pib$trimestre)
#2- calculamos la de crecimiento anual del pib, con datos trimestrales
pib <- mutate(pib, inf=((y/lag(y,n=14)-1)))
pib$trimestre <- as.Date(pib$trimestre)
class(pib$trimestre)
#2- calculamos la de crecimiento anual del pib, con datos trimestrales
pib <- mutate(pib, inf=((y/lag(y,n=4)-1)))
pib <- mutate(pib, inf=((pib$Y/lag(pib$Y,n=4L))-1)
pib <- mutate(pib, inf=((pib$Y/lag(pib$Y,n=4L))-1)
pibplot <- ggplot(pib,aes(x= pib$trimestre , y= pib$Y)) + geom_line()
pibplot
pibplot <- ggplot(pib,aes(x=trimestre , y= Y)) + geom_line()
pibplot
pibplot <- ggplot(pib,aes(x=trimestre , y=inf)) + geom_line()
pibplot
pib <- read_excel("Viernes de codigo/PIB.xlsx")
#E
pib$trimestre <- as.Date(pib$trimestre)
class(pib$trimestre)
#2- calculamos la de crecimiento anual del pib, con datos trimestrales
pib <- mutate(pib, inf=((pib$Y/lag(pib$Y,n=4L))-1)
#3- Graficamos
pibplot <- ggplot(pib,aes(x=trimestre , y=inf)) + geom_line()
pib <- mutate(pib, inf=((pib$Y/lag(pib$Y,n=4L))-1))
library(readxl)
library(dplyr)
library(ggplot2)
#Importamos los datos
pib <- read_excel("Viernes de codigo/PIB.xlsx")
#E
pib$trimestre <- as.Date(pib$trimestre)
class(pib$trimestre)
#2- calculamos la de crecimiento anual del pib, con datos trimestrales
pib <- mutate(pib, inf=((pib$Y/lag(pib$Y,n=4L))-1))
#3- Graficamos
pibplot <- ggplot(pib,aes(x=trimestre , y=inf)) + geom_line()
pibplot
pibplot <- ggplot(pib,aes(x=trimestre , y=inf)) + geom_line() + ggtitle("Crecimiento anual del PIB por trimestres") + theme_bw()
pibplot
View(pibplot)
View(pib)
pib<-pib%>%mutate(wc = (lag(C,n=4L)/lag(Y,n=4L)) *(C -(lag(C,n=4L))/lag(C,n=4L)) ,
wi = (lag(I,n=4L)/lag(Y,n=4L)) *(I -(lag(I,n=4L))/lag(I,n=4L)),
wg = (lag(G,n=4L)/lag(Y,n=4L)) *(G -(lag(G,n=4L))/lag(G,n=4L)),
wx = (lag(X,n=4L)/lag(Y,n=4L)) *(X -(lag(G,n=4L))/lag(X,n=4L)),
wm = (lag(M,n=4L)/lag(Y,n=4L)) *(M -(lag(G,n=4L))/lag(M,n=4L)))
View(pib)
pib <- pib %>% mutate(gy= wc + wi + wg + wx - wm)
piblong<-pib%>%na.omit()%>%select(trimestre,gy,wc,wi,wg,wx,wm)
piblong<-pivot_longer(piblong,!c(trimestre,gy), names_to="comp",values_to="value")
library(tidyverse)
# 5-
piblong<-pib%>%na.omit()%>%select(trimestre,gy,wc,wi,wg,wx,wm)
piblong<-pivot_longer(piblong,!c(trimestre,gy), names_to="comp",values_to="value")
ggplot(piblong,aes(x=,y=,fill=comp))+geom_bar(stat="identity")+geom_line(aes(y=gy),size=1)
View(piblong)
ggplot(piblong,aes(x=trimestre,y=value,fill=comp))+geom_bar(stat="identity")+geom_line(aes(y=gy),size=1)
#4-
pib<-pib%>%mutate(wc = (lag(C,n=4L)/lag(Y,n=4L)) *((C -(lag(C,n=4L)))/lag(C,n=4L)) ,
wi = (lag(I,n=4L)/lag(Y,n=4L)) *((I -(lag(I,n=4L)))/lag(I,n=4L)),
wg = (lag(G,n=4L)/lag(Y,n=4L)) *((G -(lag(G,n=4L)))/lag(G,n=4L)),
wx = (lag(X,n=4L)/lag(Y,n=4L)) *((X -(lag(G,n=4L)))/lag(X,n=4L)),
wm = (lag(M,n=4L)/lag(Y,n=4L)) *((M -(lag(G,n=4L)))/lag(M,n=4L)))
pib <- pib %>% mutate(gy= wc + wi + wg + wx - wm)
# 5-
piblong<-pib%>%na.omit()%>%select(trimestre,gy,wc,wi,wg,wx,wm)
piblong<-pivot_longer(piblong,!c(trimestre,gy), names_to="comp",values_to="value")
ggplot(piblong,aes(x=trimestre,y=value,fill=comp))+geom_bar(stat="identity")+geom_line(aes(y=gy),size=1)
#4-
pib<-pib%>%mutate(wc = (lag(C,n=4L)/lag(Y,n=4L)) *((C -(lag(C,n=4L)))/lag(C,n=4L)) ,
wi = (lag(I,n=4L)/lag(Y,n=4L)) *((I -(lag(I,n=4L)))/lag(I,n=4L)),
wg = (lag(G,n=4L)/lag(Y,n=4L)) *((G -(lag(G,n=4L)))/lag(G,n=4L)),
wx = (lag(X,n=4L)/lag(Y,n=4L)) *((X -(lag(G,n=4L)))/lag(X,n=4L)),
wm = -(lag(M,n=4L)/lag(Y,n=4L)) *((M -(lag(G,n=4L)))/lag(M,n=4L)))
pib <- pib %>% mutate(gy= wc + wi + wg + wx + wm)
# 5-
piblong<-pib%>%na.omit()%>%select(trimestre,gy,wc,wi,wg,wx,wm)
piblong<-pivot_longer(piblong,!c(trimestre,gy), names_to="comp",values_to="value")
ggplot(piblong,aes(x=trimestre,y=value,fill=comp))+geom_bar(stat="identity")+geom_line(aes(y=gy),size=1)
#4-
pib<-pib%>%mutate(wc = (lag(C,n=4L)/lag(Y,n=4L)) *((C -(lag(C,n=4L)))/lag(C,n=4L)) ,
wi = (lag(I,n=4L)/lag(Y,n=4L)) *((I -(lag(I,n=4L)))/lag(I,n=4L)),
wg = (lag(G,n=4L)/lag(Y,n=4L)) *((G -(lag(G,n=4L)))/lag(G,n=4L)),
wx = (lag(X,n=4L)/lag(Y,n=4L)) *((X -(lag(G,n=4L)))/lag(X,n=4L)),
wm = -(lag(M,n=4L)/lag(Y,n=4L)) *((M -(lag(G,n=4L)))/lag(M,n=4L)))
pib <- pib %>% mutate(gy= wc + wi + wg + wx + wm)
# 5-
piblong<-pib%>%na.omit()%>%select(trimestre,inf,wc,wi,wg,wx,wm)
piblong<-pivot_longer(piblong,!c(trimestre,inf), names_to="comp",values_to="value")
ggplot(piblong,aes(x=trimestre,y=value,fill=comp))+geom_bar(stat="identity")+geom_line(aes(y=gy),size=1)
#4-
pib<-pib%>%mutate(wc = (lag(C,n=4L)/lag(Y,n=4L)) *((C -(lag(C,n=4L)))/lag(C,n=4L)) ,
wi = (lag(I,n=4L)/lag(Y,n=4L)) *((I -(lag(I,n=4L)))/lag(I,n=4L)),
wg = (lag(G,n=4L)/lag(Y,n=4L)) *((G -(lag(G,n=4L)))/lag(G,n=4L)),
wx = (lag(X,n=4L)/lag(Y,n=4L)) *((X -(lag(G,n=4L)))/lag(X,n=4L)),
wm = -(lag(M,n=4L)/lag(Y,n=4L)) *((M -(lag(G,n=4L)))/lag(M,n=4L)))
pib <- pib %>% mutate(gy= wc + wi + wg + wx + wm)
# 5-
piblong<-pib%>%na.omit()%>%select(trimestre,inf,wc,wi,wg,wx,wm)
piblong<-pivot_longer(piblong,!c(trimestre,inf), names_to="comp",values_to="value")
ggplot(piblong,aes(x=trimestre,y=value,fill=comp))+geom_bar(stat="identity")+geom_line(aes(y=inf),size=1)
#4-
pib<-pib%>%mutate(wc = (lag(C,n=4L)/lag(Y,n=4L)) *((C -(lag(C,n=4L)))/lag(C,n=4L)) ,
wi = (lag(I,n=4L)/lag(Y,n=4L)) *((I -(lag(I,n=4L)))/lag(I,n=4L)),
wg = (lag(G,n=4L)/lag(Y,n=4L)) *((G -(lag(G,n=4L)))/lag(G,n=4L)),
wx = (lag(X,n=4L)/lag(Y,n=4L)) *((X -(lag(x,n=4L)))/lag(X,n=4L)),
wm = -(lag(M,n=4L)/lag(Y,n=4L)) *((M -(lag(M,n=4L)))/lag(M,n=4L)))
#4-
pib<-pib%>%mutate(wc = (lag(C,n=4L)/lag(Y,n=4L)) *((C -(lag(C,n=4L)))/lag(C,n=4L)) ,
wi = (lag(I,n=4L)/lag(Y,n=4L)) *((I -(lag(I,n=4L)))/lag(I,n=4L)),
wg = (lag(G,n=4L)/lag(Y,n=4L)) *((G -(lag(G,n=4L)))/lag(G,n=4L)),
wx = (lag(X,n=4L)/lag(Y,n=4L)) *((X -(lag(X,n=4L)))/lag(X,n=4L)),
wm = -(lag(M,n=4L)/lag(Y,n=4L)) *((M -(lag(M,n=4L)))/lag(M,n=4L)))
pib <- pib %>% mutate(gy= wc + wi + wg + wx + wm)
# 5-
piblong<-pib%>%na.omit()%>%select(trimestre,inf,wc,wi,wg,wx,wm)
piblong<-pivot_longer(piblong,!c(trimestre,inf), names_to="comp",values_to="value")
ggplot(piblong,aes(x=trimestre,y=value,fill=comp))+geom_bar(stat="identity")+geom_line(aes(y=inf),size=1)
View(piblong)
View(pib)
##-------------------------------------------------------------------------------------##
#Cargamos los datos
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
Ventas_Fecha_organizada <- read_excel("./DATOS DE VENTAS FECHA MODIFICADA.xlsx",
sheet = "BASE")
library(tidyverse)
library(magrittr)
library(dplyr)
library(lubridate)
library(tidyr)
library(fpp2)
library(readxl)
library(astsa)
library(tseries)
library(ggplot2)
library(plotly)
library(hrbrthemes)
library(openxlsx)
Ventas_Fecha_organizada <- read_excel("./DATOS DE VENTAS FECHA MODIFICADA.xlsx",
sheet = "BASE")
datos
Ventas_Fecha_organizada <- read_excel("./DATOS DE VENTAS FECHA MODIFICADA.xlsx",
sheet = "BASE")
##----------------------------------------------------------------------------------------##
### Organizamos los datos
datos <- Ventas_Fecha_organizada
names(datos)[15]= "ventas"
names(datos)[9]= "productos"
datos$fecha <- as.Date(datos$fecha) #-> Funcion para establecer el tipo de dato como fecha
class(datos$fecha)
#datos$fecha1 <- NULL #-> Funcion para borrar datos
##-----------------------------------------------------------------##
# Creamos un nuevo data frame con las columnas necesarias para el analisi
datos_filtrados <- datos %>% select(c(ventas,fecha))
datos_filtrados
#Resumimos las ventas, para tenerlas por meses
ventas_mensuales <- datos_filtrados %>%
mutate(mes = format(fecha,"%m"), year = format(fecha,"%Y")) %>%
group_by(mes,year) %>%  #Resumimos las ventas por mes y a?o con la funcion group by
summarise(ventas = sum(ventas))
ventas_mensuales <- ventas_mensuales[with(ventas_mensuales,order(ventas_mensuales$year)),]
ventas_mensuales
#Corregimos los valores NA que da?an la estimacion
ventas_mensuales1 <- ventas_mensuales[-c(1),]
###----------------------------------------------------------------------##
##----------------------------------------------------------------------##
#Declaramos los datos en una variable como serie de tiempo
y <- ts(ventas_mensuales1["ventas"] , start = c(2013,1), end = c(2022,5), frequency = 12)
y
##Exploramos los datos
autoplot(y) + ggtitle("Grafico de ventas en el tiempo e2 Energia eficiente") +
ylab("VR TOTAL M$000")+theme_modern_rc()
#Estacionalidad en los datos
#Hay problemas de tendecia que lo arreglamos aplicando la primera diferencia
ddatos <- diff(y)
adf.test(ddatos, alternative = "stationary")
ggseasonplot(ddatos) + ggtitle("Grafico estacional: cambios en las ventas mensuales") +
ylab("VR TOTAL M$000")+ theme_modern_rc()
decom = decompose(ddatos)
autoplot(decom)
#------------------------------------------------------------------------------------------#
#------------------------------------------------------------------------------------#
#-------------#
#-------#
# Pronostico del modelo de ventas totales
modelo_arima <- auto.arima(y,d=1,D=1, stepwise = FALSE , approximation = FALSE , trace = TRUE)
print(modelo_arima)
checkresiduals(modelo_arima)
pronostico <- forecast(modelo_arima, h=6, level = c(95))
autoplot(pronostico) +ggtitle("Pronostico de ventas proximos 6 meses")+ theme_bw()
#Exportamos el data frame a excel
df.pronostico <- as.data.frame(pronostico)
View(df.pronostico)
View(ventas_mensuales1)
join<- ventas_mensuales1 %>% left_join(df.pronostico, by ="id")
join<- ventas_mensuales1 %>% left_join(df.pronostico, by ="mes")
install.packages("xlsx")
library(xlsx)
library("xlsx")
library(xlsx)
library(xlsx)
